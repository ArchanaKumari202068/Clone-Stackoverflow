// passwordd_mongodb=zDhc3IdYTFEyzhw7
//Archana


import express from 'express': 
//Imports the Express.js framework, which is a web application framework for Node.js. It simplifies the process of building web servers and APIs.
import mongoose from 'mongoose': 
//Imports the Mongoose library, which is an Object Data Modeling (ODM) library for MongoDB. It provides a way to interact with MongoDB databases using JavaScript objects.
import cors from 'cors':
//Imports the Cross-Origin Resource Sharing (CORS) middleware. CORS is used to allow or restrict web application requests coming from different origins.

const app = express();
This line creates an instance of the Express application. app will be used to define routes, middleware, and handle HTTP requests and responses.


//Middleware Setup:

app.use(express.json({ limit: "30mb", extended: true }));
app.use(express.urlencoded({ limit: '30mb', extended: true }));
app.use(cors());
//express.json(): This middleware parses incoming JSON payloads from requests. The limit property sets a maximum payload size, and extended allows nested objects.
//express.urlencoded(): This middleware parses incoming URL-encoded payloads from requests.
//cors(): This middleware enables Cross-Origin Resource Sharing, allowing requests from different domains to access this server.
Defining a Route:

app.get('/', (req, res) => {
    res.send("This is a stack overflow clone API");
});
This code defines a route for the root URL (/). When a GET request is made to the root URL, the callback function is executed. In this case, it sends back the response "This is a stack overflow clone API".

Overall, the code sets up a basic Express server with middleware for JSON and URL-encoded data parsing, as well as CORS support. It defines a single route for the root URL that sends a simple message in response. The code doesn't include any database functionality using Mongoose or additional routes for performing CRUD operations, but it seems to be a starting point for building an API.





